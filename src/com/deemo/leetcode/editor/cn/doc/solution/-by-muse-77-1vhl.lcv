# 解题思路

根据题目描述，需要我们去`words`字符串数组中却判断，哪些是字符串`s`的**子序列**，最后再将**子序列的总个数**返回回来。那么，对于字符串子序列，我们主要关心如下两点：

> 【**是否存在？**】子序列中的某个字符是否在字符串s中存在。
> 【**顺序对吗？**】子序列中字符出现的顺序是否违背了字符串s中的顺序。

那么针对这两种关注点，我们首先遍历字符串`s`中的每个字符，由于这些字符都是由**小写字母**构成，所以我们可以通过采用：`字符减去‘a’`来确定**下标位置**，并将该**字符在s中出现的位置**保存到`ArrayList`集合中。

然后，我们再分别遍历字符串数组`words`中的每个字符串，逐一判断每个字符出现的**位置顺序**是否与s相同，如果不同，则可以判断该字符串不是s的子序列。具体操作详情请见下图：

![image.png](https://pic.leetcode.cn/1668648623-RdlUpx-image.png)

# 代码实现

* java

```java
class Solution {
    public int numMatchingSubseq(String s, String[] words) {
        List<Integer>[] sm = new ArrayList[26]; // index：字符  sm[index]：字符出现的位置集合
        char[] sc = s.toCharArray();
        for (int i = 0; i < sc.length; i++) {
            if (sm[sc[i]-'a'] == null) sm[sc[i]-'a'] = new ArrayList<>();
            sm[sc[i]-'a'].add(i);
        }

        int result = words.length; // 初始化result数量为所有单词，如果不满足条件，则陆续执行减1操作
        for (String word : words) { // 遍历每个单词
            int compareIndex = -1, index;
            for (int i = 0; i < word.length(); i++) { // 遍历每个字符
                if (sm[word.charAt(i)-'a'] == null || 
                        ((index = findCharIndex(compareIndex, sm[word.charAt(i)-'a'])) <= compareIndex)) {
                    result--;
                    break;
                }
                compareIndex = index;
            }
        }
        return result;
    }

    // 折半查找
    private int findCharIndex(int compareIndex, List<Integer> list) {
        int head = 0, tail = list.size() - 1, mid;
        while (head < tail) {
            mid = head + (tail - head) / 2;
            if (list.get(mid) > compareIndex) tail = mid;
            else head = ++mid;
        }
        return list.get(head);
    }
}
```

![image.png](https://pic.leetcode.cn/1668648633-NvLRra-image.png)

今天的文章内容就这些了：

> 写作不易，笔者几个小时甚至数天完成的一篇文章，只愿换来您几秒钟的 **点赞** & **分享** 。

更多技术干货，欢迎大家关注公众号“**爪哇缪斯**” ~ \\(^o^)/ ~ 「干货分享，每天更新」
